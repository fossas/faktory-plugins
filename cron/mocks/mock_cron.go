// Code generated by MockGen. DO NOT EDIT.
// Source: ./cron/cron.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cron "github.com/robfig/cron/v3"
)

// MockCronInterface is a mock of CronInterface interface.
type MockCronInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCronInterfaceMockRecorder
}

// MockCronInterfaceMockRecorder is the mock recorder for MockCronInterface.
type MockCronInterfaceMockRecorder struct {
	mock *MockCronInterface
}

// NewMockCronInterface creates a new mock instance.
func NewMockCronInterface(ctrl *gomock.Controller) *MockCronInterface {
	mock := &MockCronInterface{ctrl: ctrl}
	mock.recorder = &MockCronInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCronInterface) EXPECT() *MockCronInterfaceMockRecorder {
	return m.recorder
}

// AddFunc mocks base method.
func (m *MockCronInterface) AddFunc(spec string, cmd func()) (cron.EntryID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFunc", spec, cmd)
	ret0, _ := ret[0].(cron.EntryID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFunc indicates an expected call of AddFunc.
func (mr *MockCronInterfaceMockRecorder) AddFunc(spec, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFunc", reflect.TypeOf((*MockCronInterface)(nil).AddFunc), spec, cmd)
}

// AddJob mocks base method.
func (m *MockCronInterface) AddJob(spec string, cmd cron.Job) (cron.EntryID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJob", spec, cmd)
	ret0, _ := ret[0].(cron.EntryID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddJob indicates an expected call of AddJob.
func (mr *MockCronInterfaceMockRecorder) AddJob(spec, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJob", reflect.TypeOf((*MockCronInterface)(nil).AddJob), spec, cmd)
}

// Entries mocks base method.
func (m *MockCronInterface) Entries() []cron.Entry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entries")
	ret0, _ := ret[0].([]cron.Entry)
	return ret0
}

// Entries indicates an expected call of Entries.
func (mr *MockCronInterfaceMockRecorder) Entries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entries", reflect.TypeOf((*MockCronInterface)(nil).Entries))
}

// Remove mocks base method.
func (m *MockCronInterface) Remove(id cron.EntryID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", id)
}

// Remove indicates an expected call of Remove.
func (mr *MockCronInterfaceMockRecorder) Remove(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCronInterface)(nil).Remove), id)
}

// Run mocks base method.
func (m *MockCronInterface) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run.
func (mr *MockCronInterfaceMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCronInterface)(nil).Run))
}

// Schedule mocks base method.
func (m *MockCronInterface) Schedule(schedule cron.Schedule, cmd cron.Job) cron.EntryID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule", schedule, cmd)
	ret0, _ := ret[0].(cron.EntryID)
	return ret0
}

// Schedule indicates an expected call of Schedule.
func (mr *MockCronInterfaceMockRecorder) Schedule(schedule, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockCronInterface)(nil).Schedule), schedule, cmd)
}

// Start mocks base method.
func (m *MockCronInterface) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockCronInterfaceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCronInterface)(nil).Start))
}

// Stop mocks base method.
func (m *MockCronInterface) Stop() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockCronInterfaceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCronInterface)(nil).Stop))
}
